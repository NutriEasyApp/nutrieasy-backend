openapi: 3.0.0
info:
  title: Nutrieasy Server API
  description: Here you can find all resources to work with the Nutrieasy API.
  version: 0.1.9
servers:
  - url: http://localhost:3080/nutrieasy
    description: Localhost server
  - url: https://dev-nutrieasy.herokuapp.com/nutrieasy/
    description: Development server
  - url: https://stg-nutrieasy.herokuapp.com/nutrieasy/
    description: Staging server
  - url: https://prd-nutrieasy.herokuapp.com/nutrieasy/
    description: Production server

# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    basicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      security:
        - basicAuth: [] # <-- use the same name here
      summary: Login into application.
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: string
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /auth/signup:
    post:
      tags:
        - Authentication
      # security:
      #   - bearerAuth: []
      summary: Register an user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: string
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /users/{userid}:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: Return an user.
      parameters:
        - name: userId
          in: path
          required: true
          description: User id parameter.
      responses:
        '200': # status code
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  created_at:
                    type: string
                  id_health_analysis:
                    type: string
                  id_proposed_diet:
                    type: string
                  token:
                    type: string
                  temporary_code:
                    type: string
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
